set pdbGetHeader ON ;
// load 3oun.pdb ;
// load 2kb3.pdb
// backbone -0.2
// color {chain='A'} red;
// load 2pie.pdb;
// load 3hue.pdb
// load 1a2c.pdb;
// load 3i0n.pdb
//load append 3oun.pdb ;
// load 3kt9.pdb
// load 2kwx.pdb ; 
// load append 2kb3.pdb ;
// load 3khr.pdb ;  
// load append 3i0n.pdb ;  

// script jmolGeneric.jmol
// getSeqresno('1.1')
// print {resno=32 and chain="A"}.property_seqres

/* Ex 1 */ 

UpperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ; /*variable globale*/
LowerCaseLetters = "abcdefghijklmnopqrstuvwxyz" ; /*variable globale*/

function toUpperCase(string) {
    if (string.type == "string") {
        var n = UpperCaseLetters.size ;
        var out = string ;
        for (var i=0 ; i<n ; i++) {
            out = out.replace(LowerCaseLetters[i],UpperCaseLetters[i]) ;
        } ;
        return out ;

    } else {
        print("Ceci n'est pas une string")
        return "";
    }
}

function toLowerCase(string) {
    if (string.type == "string") {
        var n = LowerCaseLetters.size ;
        var out = string ;
        for (var i=0 ; i< n; i++) {
            out = out.replace(UpperCaseLetters[i],LowerCaseLetters[i]) ;
        } ;
        return out ;
    } else {
        print("Ceci n'est pas une string")
        return "";
    }
}
    
/* Ex 2 */

//AAA_A Variable globale 

q = {   "HIS" : "H", 
        "GLY" : "G",  
        "PRO" : "P",
        "ALA" : "A", 
        "VAL" : "V",
        "LEU" : "L",
        "ILE" : "I", 
        "MET" : "M" , 
        "CYS" : "C",
        "PHE" : "F",
        "TYR" : "Y",
        "TRP" : "W",
        "LYS" : "K",
        "ARG" : "R",
        "GLN" : "Q",
        "ASN" : "N",
        "GLU" : "E",
        "ASP" : "D",
        "SER" : "S",
        "THR" : "T", 
        "SEL" : "U", 
        "PYL" : "O" 
    } 

function tr3to1(aa) {
    if (aa.type == "string" and aa.size == 3 and q[toUpperCase(aa)]!="") {
        return q[toUpperCase(aa)];
    }
    else {
        return "?"; 
    }
}


// A_AAA Variable globale 

p = {   "H" : "HIS", 
        "G" : "GLY",  
        "P" : "PRO",
        "A" : "ALA", 
        "V" : "VAL",
        "L" : "LEU",
        "I" : "ILE", 
        "M" : "MET", 
        "C" : "CYS",
        "F" : "PHE",
        "Y" : "TYR",
        "W" : "TRP",
        "K" : "LYS",
        "R" : "ARG",
        "Q" : "GLN",
        "N" : "ASN",
        "E" : "GLU",
        "D" : "ASP",
        "S" : "SER",
        "T" : "THR", 
        "U" : "SEL", 
        "O" : "PYL" 
    } 

function tr1to3(aa) {
    if (aa.type == "string" and aa.size == 1 and p[toUpperCase(aa)]!="") {
        return p[toUpperCase(aa)];
    }
    else {
        return "???"; 
    }
}

/* Ex 3 */ 

function returnModelInit(actif){
    intervalle = actif.split("-");
    inter1 = intervalle[1];
    // print inter1; 
    if (intervalle.size == 2) {
        inter2 = intervalle[2].trim();
        // print inter2; 
        model @inter1 - @inter2;
    }
    else { 
        model @inter1;
    }
}

function getFileHeader(modID) {
    if (checkModID(modID)) {
        actif = _modelNumber;
        model @modID;
        entete =(getProperty('fileHeader'));
        returnModelInit(actif);
        return entete; 
    }
    else {
        return "";
    }  

}


// entete1 = getFileHeader('1.1') ; 
// entete2 = getFileHeader('2.1') ; 
// print entete1 ; 
// print entete2 ;

/* Ex 4 */

function checkModID(modID) {
    check = false;  
    id = modID.split(".");

    if (modID.type == "string" and id.size == 2 and id[1] >= 1 and id[2] >= 1) {  

        actif = _modelNumber; 
        model @modID; 
        modelNb = _modelNumber;
        returnModelInit(actif); 
    
        if (modID == modelNb) {
            check = true;
        }

    }
    return check; 
}

/* Ex 5 */ 

function getSubString(string, deb, fin){
    substring = "";
    for (i=deb; i<fin; i++){
        substring+= string[i];
    }
    return substring; 
}

function splitString(string,length) {
    if (string.type == "string" and length > 0 and string.size > 0 and string.size >= length) {
        tab_split = []; 
        nb_bloc = string.size / length; // calcul nombre boucle 
        idx_sub = 1 ;

        while (nb_bloc > 0) { 
            tab_split[tab_split.size+1] = getSubString(string, idx_sub, idx_sub+length);  // [deb, fin[
            nb_bloc-=1;
            idx_sub+=length;
        }

        last_bloc = string.size % length ;

        if (last_bloc > 0) {
            tab_split[tab_split.size+1] = getSubString(string, idx_sub, idx_sub+last_bloc);
        }

        return tab_split; 
    }
    print "Erreur : la chaine n'a pas pu être coupée. Le type d'entrée n'est pas approprié."; 
    return []; 

}

/* Ex 6 */ 

// Oui dans 2.1 A on voit TPO
// Et dans 4.1 A on voit MLY 
// Reste à les identifier dans la structure, difficile avec pad mac 


function trimTab(tab) { 
// split(" ") sur une chaine de caractere, sort un tableau avec des cases contenant des espaces
// donc fonction qui permet d'enlever ces cases
    new_tab = [];
    idx = 1; 
    for (k= 1; k<= tab.size; k++) {
        if (tab[k].find("^\\s*$", "v")) {
            new_tab[idx] = tab[k]
            idx++;
        }
    }
    return new_tab; 
} 

function getSeqFromSEQRES(modID, chainID) {
    modres = getMODRES(modID, true); 
    seqres = getFileHeader(modID).split("\n").find("SEQRES").find("\\s"+chainID+"\\s"); // Toutes les lignes de la chaine
    chainA = "";
    for (i=1; i <= seqres.size; i++) { // Chaque ligne de la chaine 
        ligne = trimTab(seqres[i].split(" "));  

        for (j=5; j<= ligne.size; j++) { 
            next_AA = tr3to1(ligne[j]);
            if (next_AA == "?") {
                modif = tr3to1(modres[ligne[j]]);
                if (modif != ""){
                    next_AA = modif; 
                }
            }
            chainA+= next_AA; 
        }
    }
    if (!chainA) {
        print ("Il n'y a pas de séquence pour cette chaine/modèle ou la séquence n'est pas protéique.")
    }
    return chainA; 
}

/* Ex 7 */

function getMODRES(modID,quiet) {
    new_dic = {}
    repet = {}
    seqmod = getFileHeader(modID).split("\n").find("MODRES");
     for (l=1; l <= seqmod.size; l++) {
        if (seqmod[l].size > 1) { // Si un seul MODRES alors seqmol[l] sort M au lieu de la premiere ligne 
            ligne = trimTab(seqmod[l].split(" "));
        } 
        else { 
            ligne = trimTab(seqmod.split(" "));
        }

        if (new_dic[ligne[3]] == "") {
            new_dic[ligne[3]] = ligne[6];  
            repet[ligne[3]] = 1; 

            if (ligne[3] == ligne[6] and not quiet) {
                print "Attention, la modification "+ligne[3]+" est associée à ce même résidu.";
            }
        }
        else {
            repet[ligne[3]] +=1; 
        }
        
     }

     // Affichage du nombre de repetition 
     for (key in repet.keys) {
        if (repet[key] > 1 and not quiet) {
            print "Attention, la modification "+key+" apparaît sur "+repet[key]+" lignes."; 
        }
     } 

     return new_dic;
}








//                                               _________
//                                              |=========|
//                     __[]__         _          \_______/
// +================+ /______\     __(_)__    ()  \_____/   ()
//  `-+ +-----+---+ | |------|    /_______\  /__\  |   | +======+
//    | |     |   | +-+------+-.  |=======| <____> |   | ||    ||
//    | |     |   | |o          \_|___  __|__//\\__|___|_+======+
//    | +=========+ |o                                     o||=+
//    | *         * |o                                     o||||            ALL ABOARD THE HYPE TRAIN.
//    |    --%--    |o~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~o||=+
//    +=====================================+-----------+====+
//        |==/ ------ \=====/ ------ \===%--||o        o||____
//          // \  L_/__\___//_\__L_/__\_/ %=||o~~~~~~~~o||===\\_____
//         ||__ /.  ___________ .  ______/ +==============+      \  \_
//         ||   \__/   || ||   \__/   ||     //--\\  //--\\\\   \ \ \\\_
//          \\ / || \ //   \\ / || \ //     (( <> ))(( <> ))\\_\_\_\_\\\\
//           \========/     \========/       \____/  \____/  `-----------+





// Projet - Partie 1 

function join_tab(tab) {
    ret = "";
    for (j=1; j<=tab.size; j++){
        ret+=tab[j];
    }
    return ret;
}


function getChain(modID) {

    // Attention il peut y avoir differents cas : 
    //ex. COMPND   3 CHAIN: A, B, C, D;                                                   

    ensembl_chains_find = getFileHeader(modID).split("\n").find("COMPND.+CHAIN:");
    new_tabl=[];

    ensembl_chains=  [] OR ensembl_chains_find; 

    for (l=1; l <= ensembl_chains.size; l++) {
        
        chain_s = trimTab(((ensembl_chains[l].split(':')[2])).split(" "));
        chain_s = ((join_tab(chain_s)).split(";"))[1];
        chain_s = chain_s.split(",") ; 

        if (chain_s.size != 1) { 
            for (ic=1; ic<=chain_s.size; ic++){
                new_tabl[new_tabl.size+1] = chain_s[ic]; 
            }
        } else {
            new_tabl[new_tabl.size+1] = chain_s[1];
        }
    }

    return new_tabl;
}

function getMissingResidus(modID){

    // Initialisation du dictionnaire des missig residus par chain BOOM

    ensembl_chains = getChain(modID) ; 
    dico_missing_ = {};
    isEmpty = True;

    for (l=1; l <= ensembl_chains.size ; l++) {
        dico_missing_[ensembl_chains[l]]=[] ;
    }

    missing_residus2 = getFileHeader(modID).split("\n").find("REMARK\\s465");
    missing_residus = [] OR missing_residus2;
     // Boucle pour connaître N°ligne début REMARK missing res
    idx = 1 ;

    while (missing_residus.size && missing_residus[idx].find('M\\sRES\\sC',"v") == true){
        idx+=1;
    }



    for (i=idx+1; i <= missing_residus.size ; i++) {

       missing_line=missing_residus[i];
       number = trimTab(missing_line.split(" ")); // split(' ') ou split("\s") non fonctionnels pour tout type espacement ?

       chain_letter=number[4];
        // number = missing_line.split("   "); // split(' ') ou split("\s") non fonctionnels pour tout type espacement ?
       // chain_letter=number[2].split(" ");
       // Pour gérer les codes d'indentification 
       pos_number = number[5].find("\-*[0-9]+", "m");
       dico_missing_[chain_letter][dico_missing_[chain_letter].size+1] = pos_number;
       isEmpty = False;
    }

    if (isEmpty) { 
        return {};
    } 

    return dico_missing_;
}


function getSeqresno(modID) {

    dico_missing = getMissingResidus(modID);

    // On commence à 0 car dans tous les cas verifAtom ajoutent au moins 1
    noCurr = 0; // ATTENTION 

    //check si plus d'un modele dans fichier 
    actif = _modelNumber;
    model all ;
    all_models = _modelNumber;
    returnModelInit(actif); 

    modeleN = modID.split(".")[2]

    if (all_models.find("\-")) {
        info_chain1 = (getProperty('chainInfo', {protein}).split('\n').find("atomInfo1")).find("/"+modeleN+" ");
        info_chain2 = (getProperty('chainInfo', {protein}).split('\n').find("atomInfo2")).find("/"+modeleN+" ");

    }
    else {

        // Pour eviter de stocker trop d'informations, on recalcule 6 fois et on recupere juste la taille 
        info_chain1 = (getProperty('chainInfo', {protein}).split('\n').find("atomInfo1"));
        info_chain2 = (getProperty('chainInfo', {protein}).split('\n').find("atomInfo2"));
    }



    if (info_chain1.size == info_chain2.size) {

        previous_idChain = "";
        previous_noRes = ""; 

        for (u = 1 ; u <= info_chain1.size ; u++ ) {

            idChain = (((info_chain1)[u].split(']')[2]).split('.')[1])[0] ;
            noRes = ((info_chain1)[u].split(']')[2]).split(':')[1] ;
            // noRes = noRes.find("\-*[0-9]+", "m");

            // Attention avant on avait mis ] et pas #
            noAtom1 = ((info_chain1)[u].split('#')[0]) ;
            noAtom2 = ((info_chain2)[u].split('#')[0]);

            noAtom1 = 0 + noAtom1 ; //+1 
            noAtom2 = 0 + noAtom2 ;// +1
           

            // Remise a zero complete quand on change de chaine 
            if (previous_idChain != idChain) {
                noCurr = 0;
                previous_idChain = "";
                previous_noRes = ""; 
            }

            noCurr += verifAtom(noRes,dico_missing,idChain,previous_noRes) ;

            {model = modID and atomno >= noAtom1 and atomno <= noAtom2}.property_seqresno = noCurr; 
          //  print {chain = idChain and atomno >= noAtom1 and atomno <= noAtom2}.property_seqresno

            // Pas testé quand 1 ligne chaine A puis 1 ligne chaine B mais je pense que ça marche maintenant 
            previous_idChain = idChain;
            previous_noRes = noRes;

        }

    }
       
    else {
        print 'Tailles des atomInfo non concordantes.'
    }

}

function verifAtom(noAA,dico_missing,chainID,previous_noRes){  // A améliorer avec while vérifier condition

    increment = 0;

    // Un bug precedent etait qu'on avait mis "i" dans la boucle comme dans la fonction du dessus... #Jmol

    if (dico_missing.size) {
        // Cas où on est au début d'une chaine 
        if (previous_noRes == "") { 
            for (l=1 ; l <= dico_missing[chainID].size ; l++) { 
                if ((dico_missing[chainID])[l] < noAA) {
                    increment += 1;
                }
            }
        } 
        else { // Pas encore teste, trouver jeu d'essai
            for (k=1 ; k <= dico_missing[chainID].size ; k++) { 
                if ((dico_missing[chainID])[k] >= previous_noRes && (dico_missing[chainID])[k] < noAA){
                        increment += 1 ;
                }
            }
        }
    }

    return increment+1 ;
}


//          .---- -  -
//         (   ,---— - -
//          \_/      ___
//        c--U---^--'o  [_
//        |------------'_|   EVERYONE GET READY FOR DEPARTURE ON PLATFORM NINE AND THREE-QUARTERS 
//       /_(o)(o)--(o)(o)
// ~ ~~~~~~~~~~~~~~~~~~~~~~~~ ~


// PARTIE 2


// script BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol; 

// script BLAST_alignement_tous/BLAST_result_45.jmol; 

// script BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol;
// Deb_file1= 0 + Hsp_hit_from ;
// print Deb_file1;
// Fin_file1= 0 + Hsp_hit_to ;
// print Fin_file1;

script BLAST_alignement_tous/BLAST_alignement5_3OUN-A.jmol; 

// Deb_file2= 0 + Hsp_hit_from  ;
// print Deb_file2;
// Fin_file2= 0 + Hsp_hit_to  ;
// print Fin_file2;


function getRes6000(modID){
    getSeqresno(modID);

    // Affecter -1
    {(property_seqresno < Hsp_hit_from or property_seqresno > Hsp_hit_to) and protein and chain= Hit_chain and model = modID}.property_qresno = -1;
    {(property_seqresno < Hsp_hit_from or property_seqresno > Hsp_hit_to) and protein and chain= Hit_chain and model = modID}.property_qsimil = -1;

    cpt=Hsp_gaps;
    len=1;
    pos_gap = [];
    Pos_qseq=1;


    while(cpt > 0 && len <= Hsp_hit_to){
        if (Hsp_qseq[len] == "-"){
            pos_gap[pos_gap.size+1]=len;
            cpt -= 1;
            Res_hseq = 0 + Hsp_hit_from + len - 1; /////////////////////////////////////////////////
            {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID }.property_qresno = 0;
            {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID}.property_qsimil = 0;

        }

        len +=1 ; 
    }


    // compteur de position dans tableau de gaps
    cpt=1;
    cpt_bas = 0;



    for(i=1 ; i <= Hsp_hseq.size; i+=1){
        Res_hseq = 0 + Hsp_hit_from + i - 1 - cpt_bas;
        if(cpt <= Hsp_gaps && i == pos_gap[cpt] ){
            cpt+=1;

        }
        else if (Hsp_hseq[i]== "-"){
            Pos_qseq+=1;
            cpt_bas+=1;
        }
        else{
            
            {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID}.property_qresno = 0 + Hsp_query_from + Pos_qseq - 1;
            Pos_qseq+=1;
        }

        switch (Hsp_midline[i]){
            case "+" : 
                {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID}.property_qsimil = 1 ;
                break ;
            case " " :
                {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID}.property_qsimil = 0 ;
                break ;
            default :
                {property_seqresno = Res_hseq and protein and chain= Hit_chain and model = modID}.property_qsimil = 2 ;


        }

    }



}

/*
—----------------------------------____---------------------—
                   ._____________. .'  `.    
          ._<====>_|_____________|__`__'__..___________________
     .---'[]|O|_______|||||||||_______|O|[]`---. |-------------
     |      |_|            JMOL       |_|      | |O| [] [_] [_]  COMPARE YOUR TICKET PRICE ON JMOL.COM
     |  .___|-|_______________________|-|___.  | |_|   ________
    @|__|[o]=[o]=[o]|___________|[o]=[o]=[o]|__|O|_|__/(o)==(o)
===============================================================
*/

// PARTIE 3




function getMinMax(alignID1, alignID2){
    tab_coord = [];
    script @alignID1;

    Hsp_query_from1 = Hsp_query_from
    Hsp_query_to1 = Hsp_query_to

    script @alignID2;

    Hsp_query_from2 = Hsp_query_from
    Hsp_query_to2 = Hsp_query_to

    
    tab_coord[1]= [0+Hsp_query_from1,0+Hsp_query_from2].min;
    tab_coord[2]= [0+Hsp_query_to1, 0+Hsp_query_to2].max;

    return tab_coord;
}




// 
function getCA(modID, alignID, pdbID, condition, coord){

    // load @pdbID; 
    script @alignID;
    model @modID;
    getRes6000(modID);

    Mod_Ca = []

    for (i= 0+ coord[1] ; i <= 0+coord[2]; i+=1){
        // if ({property_qresno = i && model = modID  && *.CA && property_qsimil>=condition}.size > 0 ){
            Mod_Ca[Mod_Ca.size+1] = {property_qresno = i && model = modID  && *.CA && property_qsimil >= condition}[1];
       // } // Pense pas que atomname suffise !! Et ca fait quoi quand il y a plusieurs CA ! 52 53 2pie

    }

    return Mod_Ca; 
}

tab_1_final = []
tab_2_final = []

function checkSameAlign(tab_1, tab_2){
    j = 1
    for (i= 1; i <= tab_1.size; i++){
        if (tab_1[i].size > 0 && tab_2[i].size > 0) {
            tab_1_final[j] = tab_1[i];
            tab_2_final[j] = tab_2[i];  
            j+=1;
        }   
    }
}
// Tableau_Ca_Mod1 = getCA("1.1","BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol", "2pie.pdb",2, getMinMax("BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol","BLAST_alignement_tous/BLAST_alignement5_3OUN-A.jmol") );
load 2pie.pdb;
load append 3oun.pdb ;


Tableau_Ca_Mod1 = getCA("1.1","BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol", "2pie.pdb",0, getMinMax("BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol","BLAST_alignement_tous/BLAST_alignement5_3OUN-A.jmol") );


Tableau_Ca_Mod2 = getCA("2.1","BLAST_alignement_tous/BLAST_alignement5_3OUN-A.jmol", "3oun.pdb",0,getMinMax("BLAST_alignement_tous/BLAST_alignement2_2PIE-A.jmol","BLAST_alignement_tous/BLAST_alignement5_3OUN-A.jmol") );

checkSameAlign(Tableau_Ca_Mod1,Tableau_Ca_Mod2);



// compare {1.1} {2.1} ATOMS {tab_1_final} {tab_2_final} ROTATE TRANSLATE ;





